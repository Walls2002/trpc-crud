import Head from "next/head";
import Input from "crud/components/input";

import { api } from "crud/utils/api";
import React, { useEffect, useState } from "react";
import { Trash } from "@phosphor-icons/react/Trash";
import { Pencil } from "@phosphor-icons/react/Pencil";

export default function Home() {
  type Item = {
    id: string;
    name: string;
    nickname: string;
    address: string;
  };

  // const hello = api.post.hello.useQuery({ text: "from tRPC" });
  const post = api.postapi.postSample.useMutation();
  const get = api.getapi.getSample.useQuery();
  const deleteDoc = api.deleteapi.deleteSample.useMutation();
  const update = api.updateapi.updateSample.useMutation();
  const [inputs, setInputs] = useState({
    name: "",
    nickname: "",
    address: "",
    id: "",
  });
  const [hiddenBtn, setHiddenBtn] = useState(true);
  const [currId, setCurrId] = useState("");
  const [updatedData, setUpdatedData] = useState({
    name: "",
    nickname: "",
    address: "",
    id: "",
  });
  const getInputData = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    const u = { [name]: value };

    setInputs((prev) => ({ ...prev, ...u }));
  };

  useEffect(() => {
    const u = { ["id"]: currId };
    setUpdatedData(inputs);
    setUpdatedData((prev) => ({ ...prev, ...u }));
  }, [currId, inputs]);
  const sendInput = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    if (hiddenBtn) {
      if (
        inputs.name !== "" &&
        inputs.nickname !== "" &&
        inputs.address !== ""
      ) {
        post.mutate(inputs);
        get.refetch;
        setInputs({ name: "", nickname: "", address: "", id: "" });
      } else {
        alert("All fields are required!");
        e.preventDefault();
      }
    } else {
      if (
        inputs.name !== "" &&
        inputs.nickname !== "" &&
        inputs.address !== ""
      ) {
        update.mutate(updatedData);
        get.refetch;
      } else {
        alert("All fields are required!");
        e.preventDefault();
      }
    }
  };

  const deleteInput = (id: string) => {
    if (confirm("Are you sure you want to delete this data?")) {
      deleteDoc.mutate({ id });
      get.refetch;
    }
  };
  const setDataForm = (item: Item) => {
    setInputs({
      id: "",
      name: item.name,
      nickname: item.nickname,
      address: item.address,
    });
  };

  const [data, setData] = useState(get?.data?.users);

  useEffect(() => {
    setData(get?.data?.users);
  }, [get?.data?.users]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="navbar mb-10 flex justify-between bg-neutral text-neutral-content">
        <h2 className="btn btn-ghost text-xl">CRUD</h2>
        <h2 className="btn btn-ghost text-xl">Wally Gaynor</h2>
      </div>
      <main className="flex items-center justify-around ">
        <form>
          <div className="mb-3">
            <Input
              value={inputs.name}
              name="name"
              type="text"
              placeholder="Enter Name"
              onChange={getInputData}
            />
          </div>
          <div className="mb-3">
            <Input
              value={inputs.nickname}
              name="nickname"
              type="text"
              placeholder="Enter Nickname"
              onChange={getInputData}
            />
          </div>
          <div className="mb-3">
            <Input
              value={inputs.address}
              name="address"
              type="text"
              placeholder="Enter Email Address"
              onChange={getInputData}
            />
          </div>
          <div className="flex justify-between	">
            <button
              type="submit"
              onClick={(e) => {
                sendInput(e);
              }}
              className="btn btn-outline btn-success"
            >
              {hiddenBtn ? <>Submit</> : <>Update</>}
            </button>
            {hiddenBtn ? (
              <></>
            ) : (
              <button
                onClick={() => {
                  setInputs({ name: "", nickname: "", address: "", id: "" });
                  setHiddenBtn(true);
                }}
                type="button"
                className={"btn btn-outline btn-error "}
              >
                Cancel
              </button>
            )}
          </div>
        </form>

        <div className="overflow-x-auto">
          <table className="table table-zebra">
            {/* head */}
            <thead>
              <tr>
                <th></th>
                <th>Name</th>
                <th>Nickname</th>
                <th>Address</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              {data?.map((item, index) => {
                return (
                  <tr key={index}>
                    <th>{index + 1}</th>
                    <td>{item.name}</td>
                    <td>{item.nickname}</td>
                    <td>{item.address}</td>
                    <td>
                      <button
                        onClick={(e) => {
                          deleteInput(e.currentTarget.value);
                        }}
                        value={item.id}
                        className="btn btn-error btn-sm m-1"
                      >
                        <Trash size={20} color="#ffffff" />
                      </button>
                      <button
                        value={item.id}
                        className="btn btn-info btn-sm m-1"
                        onClick={() => {
                          setHiddenBtn(false);
                          setDataForm(item);
                          setCurrId(item.id);
                        }}
                      >
                        <Pencil size={20} color="#ffffff" />
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </main>
    </>
  );
}
